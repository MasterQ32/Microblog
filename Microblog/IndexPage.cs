// ------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion: 14.0.0.0
//  
//     Änderungen an dieser Datei können fehlerhaftes Verhalten verursachen und gehen verloren, wenn
//     der Code neu generiert wird.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Microblog
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\Felix\Source\Repos\Microblog\Microblog\IndexPage.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class IndexPage : IndexPageBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("<!DOCTYPE html>\r\n<html>\r\n<head>\r\n\t<title>Random Projects</title>\r\n\t<meta http-equ" +
                    "iv=\"Content-Type\" content=\"text/html;charset=UTF-8\">\r\n\t\r\n\t<style type=\"text/css\"" +
                    " media=\"screen\">\r\n\t\thtml {\r\n\t\t\tmax-width: 1024px;\r\n\t\t\tpadding-left: 2em;\r\n\t\t\tpad" +
                    "ding-right: 2em;\r\n\t\t\tpadding-top: 1em;\r\n\t\t\tpadding-bottom: 1em;\r\n\t\t\tmargin-left:" +
                    " auto;\r\n\t\t\tmargin-right: auto;\r\n\t\t\tbackground-color: cornflowerblue;\r\n\t\t}\r\n\t\th1 " +
                    "{\r\n\t\t\tmargin: 0px;\r\n\t\t}\r\n\t\tdiv.head {\r\n\t\t\ttext-align: center;\r\n\t\t}\r\n\t\tdiv.head h" +
                    "1 {\r\n\t\t\tmargin: 0em;\r\n\t\t}\r\n\t\tnav.menu {\r\n\t\t\twidth: 100%;\r\n\t\t\tbackground-color: s" +
                    "ilver;\r\n\r\n\t\t\t\r\n\t\t\twidth: 100%;\r\n\t\t\tbackground-color: silver;\r\n\t\t\tborder-style: s" +
                    "olid;\r\n\t\t\tborder-radius: 0.5em;\r\n\t\t\tborder-width: 1px;\r\n\t\t\tborder-color: transpa" +
                    "rent;\r\n\t\t\tmargin-top: 1em;\r\n\t\t\tmargin-bottom: 1em;\r\n\t\t\tpadding: 0.5em;\r\n\t\t}\r\n\t\tn" +
                    "av.menu ul {\r\n\t\t\tlist-style-type: none;\r\n\t\t\tpadding: 0px;\r\n\t\t\tmargin: 0px;\r\n\t\t\tb" +
                    "order-radius: 0.3em;\r\n\t\t}\r\n\t\tnav.menu ul li {\r\n\t\t\tdisplay: inline-block;\r\n\t\t\twid" +
                    "th: 1em;\r\n\t\t\ttext-align: center;\r\n\t\t\tborder-radius: 0.3em;\r\n\t\t\tbackground-color:" +
                    " #eee;\r\n\t\t}\r\n\t\tnav.menu ul li.selected {\r\n\t\t\tbackground-color: white;\r\n\t\t\tfont-w" +
                    "eight: bold;\r\n\t\t}\r\n\t\tnav.menu ul li a {\r\n\t\t\tdisplay: block;\r\n\t\t\ttext-decoration:" +
                    " none;\r\n\t\t}\r\n\t\tdiv.entry {\r\n\t\t\twidth: 100%;\r\n\t\t\tbackground-color: silver;\r\n\t\t\tbo" +
                    "rder-style: solid;\r\n\t\t\tborder-radius: 0.5em;\r\n\t\t\tborder-width: 1px;\r\n\t\t\tborder-c" +
                    "olor: transparent;\r\n\t\t\tmargin-top: 1em;\r\n\t\t\tmargin-bottom: 1em;\r\n\t\t\tpadding: 0.5" +
                    "em;\r\n\t\t}\r\n\t\tdiv.entry div.info {\r\n\t\t\tfloat: right;\r\n\t\t}\r\n\t\t\r\n\t\tdiv.entry h1 {\r\n\t" +
                    "\t\tfont-size: 1.6em;\r\n\t\t}\r\n\t\tdiv.entry h2 {\r\n\t\t\tfont-size: 1.3em;\r\n\t\t}\r\n\t\tdiv.ent" +
                    "ry img {\r\n\t\t\twidth: 80%;\r\n\t\t\tmargin-left: 10%;\r\n\t\t\tmargin-right: 10%;\r\n\t\t}\r\n\t\tdi" +
                    "v.entry pre {\r\n\t\t\tbackground-color: #FFFFFF;\r\n\t\t\tpadding: 0.5em;\r\n\t\t\tborder-radi" +
                    "us: 0.3em;\r\n\t\t}\r\n\t</style>\r\n</head>\r\n<body lang=\"en-US\">\r\n\t<div class=\"head\">\r\n\t" +
                    "\t<h1>Random Projects</h1>\r\n\t</div>\r\n\t<nav class=\"menu\">\r\n\t\t<ul>\r\n\t\t");
            
            #line 107 "C:\Users\Felix\Source\Repos\Microblog\Microblog\IndexPage.tt"
 for(int i = 1; i <= this.NumberOfPages; i++) {
			if (i == this.CurrentPage) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t<li class=\"selected\">");
            
            #line 109 "C:\Users\Felix\Source\Repos\Microblog\Microblog\IndexPage.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i));
            
            #line default
            #line hidden
            this.Write("</li>\r\n\t\t");
            
            #line 110 "C:\Users\Felix\Source\Repos\Microblog\Microblog\IndexPage.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("\t\t\t<li><a href=\"?page=");
            
            #line 111 "C:\Users\Felix\Source\Repos\Microblog\Microblog\IndexPage.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i));
            
            #line default
            #line hidden
            
            #line 111 "C:\Users\Felix\Source\Repos\Microblog\Microblog\IndexPage.tt"
 if(this.Query["editor"] != null) this.Write("&editor=" + this.Query["editor"]); 
            
            #line default
            #line hidden
            this.Write("\">");
            
            #line 111 "C:\Users\Felix\Source\Repos\Microblog\Microblog\IndexPage.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i));
            
            #line default
            #line hidden
            this.Write("</a></li>\r\n\t\t");
            
            #line 112 "C:\Users\Felix\Source\Repos\Microblog\Microblog\IndexPage.tt"
 }
		} 
            
            #line default
            #line hidden
            this.Write("\t\t</ul>\r\n\t</nav>\r\n\t");
            
            #line 116 "C:\Users\Felix\Source\Repos\Microblog\Microblog\IndexPage.tt"
 foreach(var entry in this.Entries) { 
            
            #line default
            #line hidden
            this.Write("\t<div class=\"entry\">\r\n\t\t<div class=\"info\">");
            
            #line 118 "C:\Users\Felix\Source\Repos\Microblog\Microblog\IndexPage.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entry.Author));
            
            #line default
            #line hidden
            this.Write(" - ");
            
            #line 118 "C:\Users\Felix\Source\Repos\Microblog\Microblog\IndexPage.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entry.CreationDate.ToShortDateString()));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 118 "C:\Users\Felix\Source\Repos\Microblog\Microblog\IndexPage.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entry.CreationDate.ToShortTimeString()));
            
            #line default
            #line hidden
            this.Write("</div>\r\n\t\t");
            
            #line 119 "C:\Users\Felix\Source\Repos\Microblog\Microblog\IndexPage.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.markdown.Transform(entry.Text)));
            
            #line default
            #line hidden
            this.Write("\r\n\t</div>\r\n\t");
            
            #line 121 "C:\Users\Felix\Source\Repos\Microblog\Microblog\IndexPage.tt"
 } 
            
            #line default
            #line hidden
            this.Write("</body>\r\n</html>");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class IndexPageBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
